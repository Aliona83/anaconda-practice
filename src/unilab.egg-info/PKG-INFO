Metadata-Version: 2.4
Name: unilab
Version: 0.1.0
Summary: Local lib for master projects using Jupyter (Anaconda + pip)
Author: Nilton Constantino
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: mypy; extra == "dev"

# 🧪 Development Environment Setup — Master's Project (Python 3.12 + Conda + venv + Jupyter)

This repository provides clear instructions to set up a clean and reproducible development environment using **Conda**, **Python 3.12**, and **JupyterLab**. The structure is ideal for academic or research projects that use multiple notebooks and a reusable local Python library.

---

## 🧰 Prerequisites

Before starting, make sure you have:

* [Miniconda](https://docs.conda.io/en/latest/miniconda.html) or [Mamba](https://mamba.readthedocs.io/en/latest/installation.html) installed (Mamba is recommended 🚀)
* Git (optional but recommended)
* macOS / Linux / Windows with a functional terminal

Verify Conda installation:

```bash
conda --version
```

---

## 🏗️ 1. Create the Conda environment

Create a new environment named `master-classes` with **Python 3.12**:

```bash
conda env create -f environment.yml
```

Activate the environment:

```bash
conda activate master-classes
```

When conda activated, create the venv using:
```bash
python -m venv .venv
```

And activate it:
```bash
source .venv/bin/activate
```

After it you should have as your prompt something like this:
```bash
(.venv) (master-classes) user@bla %
```

---

## 📦 2. Install essential packages

With the environment active, install the base data science and development packages:

```bash
conda install -c conda-forge numpy pandas matplotlib jupyterlab ipykernel
conda install -c conda-forge pytest black ruff mypy
```

> 💡 We recommend using the `conda-forge` channel, especially on macOS (Apple Silicon), because it provides more up-to-date and optimized binary builds.

---

## 📓 3. Register the environment as a Jupyter kernel

To make the environment appear in Jupyter Notebook/Lab:

```bash
python -m ipykernel install --user --name master-classes --display-name "Master Classes (Python 3.12)"
```

After this, you'll see the kernel:

```
Python 3.12 (master-classes)
```

inside JupyterLab's kernel selector.

---

## 🧱 4. Install the local project library

If your project has a `pyproject.toml` and source code in `src/` (e.g., `src/unilab/`), install it in **editable mode**:

```bash
python -m pip install --no-deps -e .
```

> ⚠️ Using `--no-deps` avoids dependency conflicts with packages already managed by Conda.

---

## ➕ 5. Add new libraries

👉 If the library is **heavy or has binary dependencies** (e.g., scikit-learn, PyTorch, TensorFlow):

```bash
conda install -c conda-forge scikit-learn
```

👉 If it's a **pure Python library** from PyPI:

```bash
python -m pip install package-name
```

After installing new packages, you can update your environment file for reproducibility:

```bash
conda env export --from-history > environment.yml
```

---

## 🧪 6. Run tests

This project uses **pytest** for testing. Run tests with:

```bash
python -m pytest -q
```

---

## 🧭 7. Project structure

```text
.
├─ src/unilab/               # Local Python library (editable with pip install -e .)
├─ notebooks/                # Jupyter notebooks
├─ data/                     # Raw and processed data
├─ tests/                    # Unit tests
├─ reports/                  # Outputs, figures, reports
├─ scripts/                  # CLI and utility scripts
├─ environment.yml           # Conda environment definition
├─ pyproject.toml            # Project metadata and tool config
└─ README.md
```

---

## 🧼 8. Best practices

* ✅ Use **conda** for heavy or binary-dependent packages.
* ✅ Use **pip** only for your local library or pure Python packages.
* ✅ Avoid `pip install -U` for packages managed by conda.
* ✅ Version the `environment.yml` file, not the environment folder.
* ✅ If something breaks, it's usually faster to recreate the environment:

  ```bash
  conda env remove -n master-classes
  conda env create -f environment.yml
  ```

---

## ✨ Quick example

```python
%load_ext autoreload
%autoreload 2

from unilab import hello, mean

hello("Nilton")
mean([10, 20, 30])
```

---

Happy coding 🧠🚀
